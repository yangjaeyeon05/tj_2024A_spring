/* 프로그래머스 sql 문제 */
    # ============================= (1일차 SQL 문제) 2024-08-06 ============================= #
    # 1.인기있는 아이스크림
    SELECT FLAVOR FROM FIRST_HALF ORDER BY TOTAL_ORDER DESC , SHIPMENT_ID ASC;
    # 2.모든 레코드 조회하기
    SELECT * FROM ANIMAL_INS;
    # 3.역순 정렬하기
    SELECT NAME , DATETIME FROM ANIMAL_INS ORDER BY ANIMAL_ID DESC;
    # 4. 동물의 아이디와 이름
    SELECT ANIMAL_ID , NAME FROM ANIMAL_INS;
    # 5. 여러 기준으로 정렬하기
    SELECT ANIMAL_ID , NAME , DATETIME FROM ANIMAL_INS ORDER BY NAME ASC , DATETIME DESC;
    # 6. 과일로 만든 아이스크림 고르기
    SELECT FIRST_HALF.FLAVOR FROM FIRST_HALF
        INNER JOIN ICECREAM_INFO
        ON FIRST_HALF.FLAVOR = ICECREAM_INFO.FLAVOR
        WHERE TOTAL_ORDER > 3000 AND INGREDIENT_TYPE = "fruit_based"
        ORDER BY TOTAL_ORDER DESC;
    # 7.조건에 부합하는 중고거래 댓글 조회하기
    SELECT USED_GOODS_BOARD.TITLE , USED_GOODS_BOARD.BOARD_ID , USED_GOODS_REPLY.REPLY_ID ,
        USED_GOODS_REPLY.WRITER_ID , USED_GOODS_REPLY.CONTENTS , DATE_FORMAT(USED_GOODS_REPLY.CREATED_DATE, '%Y-%m-%d') AS CREATED_DATE
        FROM USED_GOODS_BOARD
        INNER JOIN USED_GOODS_REPLY
        ON USED_GOODS_BOARD.BOARD_ID = USED_GOODS_REPLY.BOARD_ID
        WHERE USED_GOODS_BOARD.CREATED_DATE LIKE "2022-10%"
        ORDER BY USED_GOODS_REPLY.CREATED_DATE ASC , USED_GOODS_BOARD.TITLE ASC;
    # 8.강원도에 위치한 생산공장 목록 출력하기
    SELECT FACTORY_ID , FACTORY_NAME , ADDRESS FROM FOOD_FACTORY
    WHERE ADDRESS LIKE "강원도%"
    ORDER BY FACTORY_ID ASC;
    # 9. 아픈 동물 찾기
    SELECT ANIMAL_ID , NAME FROM ANIMAL_INS WHERE INTAKE_CONDITION = "Sick";
    # 10. 어린 동물 찾기
    SELECT ANIMAL_ID , NAME FROM ANIMAL_INS WHERE INTAKE_CONDITION != "Aged";
    # 11. 상위 n개 레코드
    SELECT NAME FROM ANIMAL_INS ORDER BY DATETIME ASC LIMIT 1;
    # 12. Python 개발자 찾기
    SELECT ID , EMAIL , FIRST_NAME , LAST_NAME FROM DEVELOPER_INFOS WHERE SKILL_1 = "Python" OR SKILL_2 = "Python" OR SKILL_3 = "Python" ORDER BY ID ASC;
    # ============================= (2일차 SQL 문제) 2024-08-07 ============================= #
    # 1.[ SUM, MAX, MIN ] 가장 비싼 상품 구하기
    SELECT MAX(PRICE) AS MAX_PRICE FROM PRODUCT;
    # 2.[ SUM, MAX, MIN ] 최댓값 구하기
    SELECT MAX(DATETIME) AS 시간 FROM ANIMAL_INS;
    # 3.[ SUM, MAX, MIN ] 가격이 제일 비싼 식품의 정보 출력하기
    SELECT * FROM FOOD_PRODUCT WHERE PRICE = (SELECT MAX(PRICE) FROM FOOD_PRODUCT);
    # 4.[ SUM, MAX, MIN ] 최솟값 구하기
    SELECT MIN(DATETIME) AS 시간 FROM ANIMAL_INS;
    # 5.[ SUM, MAX, MIN ] 동물 수 구하기
    SELECT COUNT(*) FROM ANIMAL_INS;
    # 6.[ SUM, MAX, MIN ] 중복 제거하기
    SELECT COUNT(DISTINCT NAME) FROM ANIMAL_INS;
    # 7.[ SUM, MAX, MIN ] 조건에 맞는 아이템들의 가격의 총합 구하기
    SELECT SUM(PRICE) AS TOTAL_PRICE FROM ITEM_INFO WHERE RARITY = "LEGEND";
    # 8. [SELECT] 조건에 맞는 회원수 구하기
    SELECT COUNT(*) AS USERS FROM USER_INFO WHERE AGE >= 20 AND AGE <= 29 AND JOINED LIKE "2021%";
    # 9. [SELECT] 잔챙이 잡은 수 구하기
    SELECT COUNT(*) AS FISH_COUNT FROM FISH_INFO WHERE LENGTH IS NULL;
    # 10. [SELECT] 특정 형질을 가지는 대장균 찾기
    SELECT COUNT(*) AS COUNT FROM ECOLI_DATA
        WHERE ( BIN(CONVERT(GENOTYPE,BINARY)) LIKE "%1" OR BIN(CONVERT(GENOTYPE,BINARY)) LIKE "%100")
        AND BIN(CONVERT(GENOTYPE,BINARY)) NOT LIKE "%11";
    -- SELECT ID FROM ECOLI_DATA WHERE BIN(CONVERT(GENOTYPE,BINARY)) LIKE "%1";      1를 포함한 형질  3개
    -- SELECT ID FROM ECOLI_DATA WHERE BIN(CONVERT(GENOTYPE,BINARY)) LIKE "%11";     2를 포함한 형질  1개
    -- SELECT ID FROM ECOLI_DATA WHERE BIN(CONVERT(GENOTYPE,BINARY)) LIKE "%1__";     3을 포함한 형질 2개
    -- SELECT ID FROM ECOLI_DATA WHERE BIN(CONVERT(GENOTYPE,BINARY)) LIKE "1___";     4를 포함한 형질 3개
    -- 4를 포함한 구문 제외해서 WHERE 조건 구문 생성
    -- BIN(CONVERT(GENOTYPE,BINARY)) LIKE "%1__" 구문을 넣을 경우 오류 발생 으로 __ 00으로 대체
    # 11. [GROUP BY]자동차 종류 별 특정 옵션이 포함된 자동차 수 구하기
    SELECT CAR_TYPE , COUNT(*) AS CARS FROM CAR_RENTAL_COMPANY_CAR
    	WHERE OPTIONS LIKE "%가죽시트%" OR OPTIONS LIKE "%통풍시트%" OR OPTIONS LIKE "%열선시트%"
    	GROUP BY CAR_TYPE
    	ORDER BY CAR_TYPE ASC;
    # 12. [GROUP BY]성분으로 구분한 아이스크림 총 주문량
    SELECT INGREDIENT_TYPE , SUM(TOTAL_ORDER) FROM FIRST_HALF
        INNER JOIN ICECREAM_INFO ON FIRST_HALF.FLAVOR = ICECREAM_INFO.FLAVOR
        GROUP BY INGREDIENT_TYPE
        ORDER BY TOTAL_ORDER ASC;
    # 13. [GROUP BY]진료과별 총 예약 횟수 출력하기
    SELECT MCDP_CD AS 진료과코드 , COUNT(*) AS 5월예약건수 FROM APPOINTMENT
        WHERE APNT_YMD LIKE "2022-05%"
        GROUP BY MCDP_CD
        ORDER BY 5월예약건수 ASC , 진료과
    # 14. [GROUP BY]고양이와 개는 몇 마리 있을까
    SELECT ANIMAL_TYPE , COUNT(*) FROM ANIMAL_INS
        WHERE ANIMAL_TYPE = "Cat" OR ANIMAL_TYPE = "Dog"
        GROUP BY ANIMAL_TYPE
        ORDER BY ANIMAL_TYPE ASC;
    # 15. [GROUP BY]동명 동물 수 찾기
    SELECT NAME , COUNT(NAME) FROM ANIMAL_INS
        GROUP BY NAME HAVING COUNT(NAME) > 1
        ORDER BY NAME ASC;
    # 16. [GROUP BY]조건에 맞는 사원 정보 조회하기
    SELECT SUM(HR_GRADE.SCORE) AS SCORE, HR_EMPLOYEES .EMP_NO ,
            HR_EMPLOYEES .EMP_NAME , HR_EMPLOYEES .POSITION	 , HR_EMPLOYEES .EMAIL FROM HR_DEPARTMENT
        INNER JOIN HR_EMPLOYEES ON HR_DEPARTMENT.DEPT_ID = HR_EMPLOYEES.DEPT_ID
        INNER JOIN HR_GRADE ON HR_EMPLOYEES.EMP_NO = HR_GRADE.EMP_NO
        GROUP BY HR_EMPLOYEES .EMP_NO
        ORDER BY SCORE DESC
        LIMIT 1;
    # 17. [GROUP BY]물고기 종류 별 잡은 수 구하기
    SELECT COUNT(*) AS FISH_COUNT , FISH_NAME FROM FISH_INFO
        INNER JOIN FISH_NAME_INFO ON FISH_INFO.FISH_TYPE = FISH_NAME_INFO.FISH_TYPE
        GROUP BY FISH_NAME
        ORDER BY FISH_COUNT DESC;
    # 18. [JOIN]상품 별 오프라인 매출 구하기
    SELECT PRODUCT_CODE , SUM(PRICE*SALES_AMOUNT) AS SALES FROM PRODUCT
        INNER JOIN OFFLINE_SALE ON PRODUCT.PRODUCT_ID = OFFLINE_SALE.PRODUCT_ID
        GROUP BY PRODUCT_CODE
        ORDER BY SALES DESC , PRODUCT_CODE ASC;









