* 인터페이스 : 동일한 목적하에 서로 다른 기능(오버라이딩)을 수행하기 위한 통합
* 구현(객)체 : 해당 인터페이스를 구현(오버라이딩)한 클래스를 객체 생성
- Collection
    [1] List 인터페이스
        - 공통점 : 저장된 순서(인덱스) 데이터 관리 , 데이터 중복 허용
        - 1. ArrayList 클래스

        - 2. Vector 클래스
            - LIST 메소드에 동기화가 추가된 클래스
            - 멀티스레드를 구현 시 사용

        - 3. LinkedList 클래스
            - 중간 삽입/삭제 사용시 ArrayList 보다 좋은 성능을 가진다.

        - 객체 선언방법
            List<String> list = new ArrayList<>();          인터페이스타입일 경우 타입변환 수월하다.
            ArrayList<String> list2 = new ArrayList<>();

            - 제네릭타입 : 리스트 객체에 저장할 요소들의 타입
            - 자주 사용되는 메소드
                1. .add(요소) : 리스트내 마지막 인덱스 뒤로 요소 추가
                2. .set(인덱스 , 요소) : 리스트내 특정 인덱스에 요소 수정 / 기존 요소 사라짐
                3. .size() : 리스트내 요소 개수
                4. .get(인덱스) : 리스트내 특정 인덱스의 요소 값 호출
                5. .contains(값/객체) : 리스트내 특정 값 또는 객체를 검색하여 존재하면 true 없으면 false
                6. .indexOf(값/객체) : 리스트내 특정 값 또는 객체를 검색하여 존재하면 찾은 인덱스 없으면 -1
                7. .remove(인덱스) : 리스트내 특정 인덱스 또는 객체가 존재하면 요소 삭제
                8. .clear() : 리스트내 전체 요소 삭제
                9. .isEmpty() : 리스트내 요소가 하나도 없으면 true 요소가 존재하면 false

    [2] Set 인터페이스