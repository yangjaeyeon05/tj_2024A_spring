* 인터페이스 : 동일한 목적하의 서로다른기능(오버라이딩)을 수행하기 위한 통합
* 구현(객)체 : 해당 인터페이스를 구현(오버라이딩)한 클래스로 객체 생성
컬렉션 프레임워크
    - 컬렉션(수집) , 프레임워크(미리 만들어진 틀)
    - 자료를 수집하는 방법을 미리 만들어둔 인터페이스/클래스/메소드
    - 복잡한 자료구조를 제공받는다.

- Collection
    [1] List 인터페이스
        - 공통점 : 저장된 순서(인덱스) 이용한 데이터 관리 , 데이터 중복 허용
        - 1. ArrayList 클래스
        - 2. Vector 클래스
            - LIST 메소드이 동기화가 추가된 클래스
            - 멀티스레드를 구현시 사용
        - 3. LinkedList 클래스
            - 중간 삽입/삭제 사용시 ArrayList 보다 좋은 성능을 가진다.

        - 객체 선언방법
        List< 제네릭타입 > 변수명 = new ArrayList<>();          인터페이스타입 일경우 타입변환 수월하다.
        ArrayList< 제네릭타입 > 변수명 = new ArrayList<>();

        - 제네릭타입 : 리스트 객체에 저장할 요소들의 타입
        - 자주 사용되는 메소드
            1. .add( 요소 ) : 리스트내 마지막 인덱스 뒤로 요소 추가
            2. .set( 인덱스 , 요소 ) : 리스트내 특정 인덱스의 요소 수정 / 기존 요소 사라짐
            3. .size() : 리스트내 요소 개수
            4. .get( 인덱스 ) : 리스트내 특정 인덱스의 요소 값 호출
            5. .contains( 값/객체 ) : 리스트내 특정 값 또는 객체를 검색하여 존재하면 true 없으면 false
            6. .indexOf( 값/객체 ) : 리스트내 특정 값 또는 객체를 검색하여 존재하면 찾은인덱스 없으면 -1
            7. .remove( 인덱스/객체 ) : 리스트내 특정 인덱스 또는 객체가 존재하면 요소 삭제
            8. .clear() : 리스트내 전체 요소 삭제
            9. .isEmpty() : 리스트내 요소가 하나도 없으면 true 요소가 존재하면 false


    [2] Set 인터페이스
        - 공통점 : 저장된 순서(인덱스) 없고 , 데이터 중복 허용하지 않는다.
        - 1. HashSet 클래스

        - 자주 사용되는 메소드
            1. .add( 요소 )   : set객체내 요소 추가
            2. .size()        : set객체내 요소 총개수
            3. .remove( 요소 ) : set객체내 동일한 요소가 존재하면 삭제
            4. .contains( 요소) : set객체내 동일한 요소가 존재하면 true 없으면 false
            5. .clear() : set객체내 전체 요소 삭제
            6. .isEmpty() : set객체내 요소가 하나도 없으면 true 요소가 존재하면 false
            7. .iterator() : 반복자 인터페이스 반환
                .hasNext() : 다음 요소가 존재하면 true 없으면 false 반환
                .next() : 다음 요소 호출

        - set 중복을 제거하는 방법 : 객체의 주소값을 비교해서 동일한 주소값은 저장하지 않는다.
             - 리터럴 제외한 객체들을 중복제거 재정의
                1. hashCode() 재정의
                    @Override
                    public int hashCode() {
                        return 중복비교기준필드;
                    }
                2. equals() 재정의
                    @Override
                    public boolean equals(Object obj) {
                        if( obj instanceof 클래스명 ){
                            클래스명 변수명 = (클래스명)obj;
                            if( this.중복비교기준필드 == 변수명.중복비교기준필드 ){
                                return true;
                            }else{
                                return false;
                            }
                        }
                        return false;
                    }

    [2] Map 인터페이스
        - 공통점 : 저장된 순서(인덱스) 없고
        - key-value 이루어진 한쌍(엔트리)
        - key : 중복불가능 , value : 중복가능
        - 1. HashMap 클래스

        - 자주 사용되는 메소드
            1. .put( key , value )  : map 객체내 key 와 value 엔트리 추가
            2. .size()  : map 객체내 엔트리 개수
            3. .get( key ) : map 객체내 key 해당 하는 value 반환
            4. .remove( key ) : map 객체내 key 해당 하는 엔트리 삭제
            5. .clear() : map 객체내 전체 엔트리 삭제
            6. .isEmpty() : map 객체내 엔트리 가 하나도 없으면 true 요소가 존재하면 false
            7. .keySet() : map 객체내 모든 key 반환
            8. .values() : map 객체내 모든 value 반환
            9. .entrySet() : map 객체내 모든 entry 반환