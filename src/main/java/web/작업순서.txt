회원가입 구현
	[1] 회원가입 DB 설계 ( 강의 카톡방 SQL 사용 )
	[2] MemberDto 클래스 (롬복 사용)
	[3] MemberController 에서 회원가입 메소드  구현 ( HTTP 매핑 테스트 )
		회원가입 REST : POST , /member/signup
		받기/요청 : 아이디 , 비밀번호 , 이름 , 이메일 , 연락처
		주고/응답 : boolean : true/false
	[4] MemberService 에서 회원가입 메소드 구현 ( SpringMvc 빈 사용 )
	[5] MemberDao 에서  회원가입 메소드 구현
	===============================
	[6] Talend API 테스트 진행
	===============================
	[7] JS 에서 AJAX 이용한 회원가입 구현
		- 성공시 '회원가입성공' alert 출력 후 로그인페이지로 이동
		- 실패시 '회원가입실패' alert 출력
로그인 구현
    [1] MemberController 에서 로그인 메소드  구현 ( HTTP 매핑 테스트 )
		회원가입 REST : POST , /member/login
		받기/요청 : 아이디 , 비밀번호
		주고/응답 : boolean
	[2] MemberService 에서 로그인 메소드 구현 ( SpringMvc 빈 사용 )
	[3] MemberDao 에서  로그인 메소드 구현
	===============================
	[4] Talend API 테스트 진행
    ===============================
    [5] HTML · JS 에서 AJAX 이용한 회원가입 구현
        - 성공시 '로그인 성공' alert 출력 후 메인페이지 이동
        - 실패시 '로그인 실패' alert 출력

내정보 페이지 구현
    - 현재 로그인된 회원의 모든 정보(비밀번호제외) 출력
    [1] MemberController 에서 내정보 메소드  구현
        마이페이지 REST : GET , /member/my/info
        받기/요청 : x
        주고/응답 : memberDto
        * 로그인 세션 활용
    [2] MemberService 에서 내정보 메소드 구현
    [3] MemberDao 에서  내정보 메소드 구현
    ===============================
    [4] templates --> member 폴더내 myinfo.html
    [5] ViewController 에서 해당 템플릿 매핑
        마이페이지 VIEW GET /member/mypage
    [6] header.html 에서 <a> 링크 연결
        <li> <a href="/member/mypage"> 내정보 </a> </li>
    [7] HTML · JS 에서 AJAX 이용한 회원가입 구현
        - 성공시 '로그인 성공' alert 출력 후 메인페이지 이동
        - 실패시 '로그인 실패' alert 출력
=========================================> 어제코드+오늘코드 ==> 카톡 링크 제출
아이디 중복검사 구현
    - 회원가입시 입력한 아이디가 기존 회원들이 사용중인지 아닌지 검사.
    [1] MemberController 에서 아이디 중복검사  구현
        마이페이지 REST : GET , /member/idcheck
        받기/요청 : 입력받은 아이디
        주고/응답 : true : 중복 상태 , false : 중복이 아닌 상태
    [2] MemberService 에서 내정보 메소드 구현
    [3] MemberDao 에서  내정보 메소드 구현
	===============================
	[4] Talend API 테스트 진행
    ===============================
    [5] HTML · JS 에서 AJAX 이용한 회원가입 구현
        - 성공시 '로그인 성공' alert 출력 후 메인페이지 이동
        - 실패시 '로그인 실패' alert 출력

인증 번호 요청 구현
    [1] AuthController 에서 인증 번호 요청  구현
        REST URL : GET , /auth/code
        받기/요청 : 입력받은 이메일
        주고/응답 : boolean( true:인증번호생성 , false:인증번호생성실패)
    [2] AuthService 에서 인증 번호 요청  구현
        - 숫자형식의 난수 6자리 생성
        - 인증번호(난수) 세션처리
    ===============================
    [3] Talend API 테스트 진행
    ===============================

인증 번호 인증 구현
    [1] AuthController 에서 인증 번호 인증  구현
        REST URL : POST , /auth/check
        받기/요청 : 입력받은 인증코드
        주고/응답 : boolean( true:인증성공 , false : 인증실패 )
    [2] AuthService 에서 인증 번호 요청  구현
        - 요청시 생성된 인증번호 와 비교
    ===============================
    [3] Talend API 테스트 진행
    ===============================
수정 페이지 구현
    조건1 : 현재 로그인된 회원정보를 보여주고(비밀번호제외) 새로운 정보로 수정할수 있도록 구현
    조건2 : 이름 , 비밀번호 , 전화번호 수정 가능하도록 구현
        이름 <input />
        기존비밀번호 <input />
        새로운비밀번호 <input />
        전화번호 <input />
    조건3 : 비밀번호 수정시에는 기존 비밀번호도 입력받아 일치시에만 새로운 비밀번호로 구현

탈퇴 페이지 구현
    조건 : 비밀번호를 입력받아 현재로그인된 회원의 비밀번호와 입력한 비밀번호가 일치하면 회원 탈퇴 구현

=================================== 공통 ===============
1. HTML(타임리프) 파일 생성
    - 상황에 따라 HTML 작성
2. HTML(타임리프) 매핑 주소 정의
    - 템플릿(타임리프)를 반환해주는 매핑 주소를 controller 정의
3.  <a> , location.href 를 이용한 페이지 이동
========================================================
탈퇴
    1. 클라이언트로 부터 무엇을 입력 받을지 생각.
        <input class="pwConfirm" type="text"/>
    2. 클릭 이벤트 처리
        <button onclick="doLeave()" type="button">확인</button>
    3.
    [1] MemberController 에서 탈퇴  구현
        REST : Delete , /member/leave
        받기/요청 : 입력받은 비밀번호
        주고/응답 : true : 탈퇴 성공 , false : 탈퇴 실패

    [2] MemberService 에서 탈퇴 구현
        - 현재 로그인된 회원의 회원번호 추출

    [3] MemberDao 에서  탈퇴 구현

	===============================
	[4] Talend API 테스트 진행
    ===============================
    [5] HTML · JS 에서 AJAX 이용한 탈퇴 구현
        - 성공시 '탈퇴 성공' alert 출력 후 로그아웃
        - 실패시 '탈퇴 실패' alert 출력