- 스트림 : 데이터가 다니는 통로의 흐름
    - 주로 자바 외 장치와 데이터 주고 받을 때 사용 : 키보드 , 파일처리 , JDBC , 네트워크

- HTML에서 첨부파일 입력 받을 때
    1. <input type="file" class="bfile"/>
    2. JS : document.querySelector(".bfile").value;
    - "C:\fakepath\업로드파일명"
    - JS는 유저 (클라이언트)의 실제 파일 경로를 얻어낼 수 없다. 브라우저 법/규칙

- 업로드 : 파일 올리기
    - 유저(클라이언트)PC/모바일의 파일을 서버(SPRING 내장 톰켓 서버)로 이동/복사
    - 이동/복사
        - 대용량 이동시에는 HTTP는 바이트 형식만 지원

- 다운로드 : 파일 내려받기

1. 업로드 구현 방법
    1. HTML : <form class="boardWriteForm">
              <input type="file" class="bfile"/>
              </form>

    2. <FORM> 마크업의 전체 HTML 호출
        JS : let boardWriteForm = document.querySelector(".boardWriteForm");

    3. FORM 전체 HTML을 바이트로 변환해주는 기능이 담긴 객체로 반환
        - new FormData()
        JS : let boardWriteFormData = new FormData(boardWriteForm);

    4. AJAX 대용량 전송 필수 옵션
        - method : post , put
        - data : boardWriteFormData
        - contentType : false
        - processData : false : 데이터를 쿼리 문자열로 변환할지 여부를 결정

* HTML FORM과 자바의 BoardDto 필드와 매핑할 때 주의할 점 :
    - HTML name 속성과 dto의 필드명과 동일해야 한다.
    - FORMDATA 전송 시 FORM내 데이터(value)를 식별할때는 name 속성의 이름으로 식별하기 때문에
    ** form 을 한번에 전송 시에는 class , id 외 name을 지정해줘야 한다.

* 자바에서 대용량 바이트의 타입
    <input type="text" class="bfile"/> ---> String 기능
    <input type="file" class="bfile"/> ---> String 불가능 . (binary)
    - MultipartFile 인터페이스 : Spring 제공하는 라이브러리
        - 주로 대용량 바이트 파일을 매핑/조작할때 사용되는 인터페이스

    5. MultipartFile
        1. 실제 파일이름 추출
            multipartFile.getOriginalFilename();
        2. 바이트를 저장할 경로 설정
            String uploadPath = "C:\\저장할경로\\";
        3. 경로와 실제 파일명 연결해서 하나의 문자열로 표현
            String filePath = uploadPath + fileName;
        4. 해당 문자열 경로의 파일 객체 만들기
            File file = new File(filePath);
        5. 바이트를 복사/저장/이동
            multipartFile.transferTo(file);
            - 무조건 일반 예외 발생하므로 예외 처리

